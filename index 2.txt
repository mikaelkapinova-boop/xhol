<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Xhol Pro - Plateforme de Jeu</title>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --primary: #0ea5e9;
  --primary-dark: #0369a1;
  --secondary: #8b5cf6;
  --accent: #f59e0b;
  --success: #10b981;
  --danger: #ef4444;
  --warning: #f59e0b;
  --dark: #0f172a;
  --dark-light: #1e293b;
  --gray: #64748b;
  --light: #f1f5f9;
  --white: #ffffff;
  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  --gradient-dark: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 100%);
  --gradient-card: linear-gradient(145deg, #1e293b, #0f172a);
  --shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  --shadow-lg: 0 35px 60px -12px rgba(0, 0, 0, 0.35);
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: var(--gradient-dark);
  color: var(--white);
  min-height: 100vh;
  overflow-x: hidden;
}

/* Animations globales */
@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideInRight {
  from { opacity: 0; transform: translateX(50px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.05); }
}

@keyframes glow {
  0%, 100% { box-shadow: 0 0 20px rgba(14, 165, 233, 0.3); }
  50% { box-shadow: 0 0 40px rgba(14, 165, 233, 0.6); }
}

/* Header */
.header {
  background: rgba(15, 23, 42, 0.95);
  backdrop-filter: blur(20px);
  padding: 1rem 2rem;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1400px;
  margin: 0 auto;
}

.logo {
  font-size: 2rem;
  font-weight: 900;
  background: var(--gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.nav-links {
  display: flex;
  gap: 2rem;
  align-items: center;
}

.nav-link {
  color: var(--light);
  text-decoration: none;
  font-weight: 500;
  transition: all 0.3s ease;
  position: relative;
}

.nav-link:hover {
  color: var(--primary);
}

.nav-link::after {
  content: '';
  position: absolute;
  width: 0;
  height: 2px;
  bottom: -5px;
  left: 0;
  background: var(--primary);
  transition: width 0.3s ease;
}

.nav-link:hover::after {
  width: 100%;
}

/* Containers */
.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 2rem;
  margin-top: 80px;
}

.hidden {
  display: none !important;
}

/* Auth Section */
.auth-section {
  min-height: calc(100vh - 80px);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
}

.auth-container {
  background: var(--gradient-card);
  border-radius: 24px;
  padding: 3rem;
  box-shadow: var(--shadow-lg);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  max-width: 480px;
  width: 100%;
  animation: fadeInUp 0.6s ease;
}

.auth-title {
  font-size: 2.5rem;
  font-weight: 800;
  text-align: center;
  margin-bottom: 0.5rem;
  background: var(--gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.auth-subtitle {
  text-align: center;
  color: var(--gray);
  margin-bottom: 2rem;
}

.auth-tabs {
  display: flex;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 12px;
  padding: 4px;
  margin-bottom: 2rem;
}

.auth-tab {
  flex: 1;
  padding: 12px;
  text-align: center;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 600;
}

.auth-tab.active {
  background: var(--primary);
  color: white;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: var(--light);
}

.form-input {
  width: 100%;
  padding: 1rem 1.5rem;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: white;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.form-input:focus {
  outline: none;
  border-color: var(--primary);
  background: rgba(255, 255, 255, 0.08);
}

.form-input::placeholder {
  color: var(--gray);
}

.btn {
  padding: 1rem 2rem;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1rem;
  position: relative;
  overflow: hidden;
}

.btn:before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.btn:hover:before {
  left: 100%;
}

.btn-primary {
  background: var(--gradient-primary);
  color: white;
  width: 100%;
  margin-bottom: 1rem;
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 20px 40px rgba(14, 165, 233, 0.4);
}

.btn-secondary {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: 2px solid rgba(255, 255, 255, 0.2);
}

.btn-secondary:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: var(--primary);
}

.social-login {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-top: 1.5rem;
}

.social-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: white;
  text-decoration: none;
  transition: all 0.3s ease;
  font-weight: 600;
}

.social-btn:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: translateY(-2px);
}

/* Dashboard */
.dashboard {
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 2rem;
  min-height: calc(100vh - 80px);
}

.sidebar {
  background: var(--gradient-card);
  border-radius: 20px;
  padding: 2rem;
  height: fit-content;
  position: sticky;
  top: 100px;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.user-profile {
  text-align: center;
  margin-bottom: 2rem;
  padding-bottom: 2rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.user-avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: var(--gradient-primary);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 1rem;
  font-size: 2rem;
  color: white;
  animation: glow 3s ease-in-out infinite;
}

.user-name {
  font-size: 1.25rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.user-stats {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  text-align: center;
}

.stat-item {
  background: rgba(255, 255, 255, 0.05);
  padding: 1rem;
  border-radius: 12px;
}

.stat-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--primary);
}

.stat-label {
  font-size: 0.75rem;
  color: var(--gray);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.sidebar-nav {
  list-style: none;
}

.sidebar-nav li {
  margin-bottom: 0.5rem;
}

.sidebar-nav a {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  color: var(--light);
  text-decoration: none;
  border-radius: 12px;
  transition: all 0.3s ease;
  font-weight: 500;
}

.sidebar-nav a:hover, .sidebar-nav a.active {
  background: var(--primary);
  transform: translateX(5px);
}

/* Main Content */
.main-content {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.content-section {
  background: var(--gradient-card);
  border-radius: 20px;
  padding: 2rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  animation: fadeInUp 0.6s ease;
}

.section-title {
  font-size: 1.75rem;
  font-weight: 700;
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
  gap: 1rem;
}

.section-title i {
  color: var(--primary);
}

/* Tables Grid */
.tables-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 1.5rem;
}

.table-card {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  padding: 1.5rem;
  border: 2px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.table-card:hover {
  transform: translateY(-5px);
  border-color: var(--primary);
  box-shadow: 0 20px 40px rgba(14, 165, 233, 0.2);
}

.table-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.table-name {
  font-size: 1.25rem;
  font-weight: 700;
}

.table-status {
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
}

.status-waiting {
  background: var(--warning);
  color: var(--dark);
}

.status-playing {
  background: var(--success);
  color: white;
}

.status-full {
  background: var(--danger);
  color: white;
}

.table-info {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

.info-item {
  text-align: center;
}

.info-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--primary);
}

.info-label {
  font-size: 0.75rem;
  color: var(--gray);
  text-transform: uppercase;
}

.players-list {
  margin-bottom: 1rem;
}

.player-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.5rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
  margin-bottom: 0.5rem;
}

.player-avatar-small {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: var(--gradient-secondary);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 0.75rem;
}

/* Game Interface */
.game-interface {
  background: var(--gradient-card);
  border-radius: 20px;
  padding: 2rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  min-height: 600px;
}

.game-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.game-timer {
  font-size: 2rem;
  font-weight: 700;
  color: var(--accent);
  display: flex;
  align-items: center;
  gap: 0.5rem;
  animation: pulse 2s infinite;
}

.game-table {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}

.table-center {
  display: flex;
  gap: 2rem;
  align-items: center;
  justify-content: center;
}

.deck-card {
  width: 100px;
  height: 140px;
  border-radius: 12px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.deck-card:hover {
  transform: scale(1.05);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
}

.deck-pile {
  background: var(--gradient-primary);
  color: white;
}

.discard-pile {
  background: var(--gradient-secondary);
  color: white;
}

.deck-count {
  font-size: 0.75rem;
  opacity: 0.8;
  margin-top: 0.5rem;
}

.players-hands {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  width: 100%;
}

.player-hand {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  padding: 1.5rem;
  border: 2px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}

.player-hand.current-player {
  border-color: var(--primary);
  box-shadow: 0 0 20px rgba(14, 165, 233, 0.3);
  animation: glow 3s ease-in-out infinite;
}

.player-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.player-name {
  font-weight: 700;
  color: var(--primary);
}

.player-score {
  background: rgba(255, 255, 255, 0.1);
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
}

.cards-container {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  justify-content: center;
}

.card {
  width: 50px;
  height: 70px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  font-size: 0.75rem;
  border: 2px solid rgba(255, 255, 255, 0.2);
}

.card:hover {
  transform: translateY(-10px) scale(1.1);
  z-index: 10;
}

.card-spades, .card-clubs {
  background: linear-gradient(145deg, #2d3748, #1a202c);
  color: white;
}

.card-hearts, .card-diamonds {
  background: linear-gradient(145deg, #e53e3e, #c53030);
  color: white;
}

.card-joker {
  background: linear-gradient(145deg, #ffd700, #ffed4e);
  color: #1a202c;
  animation: pulse 2s infinite;
}

.card-back {
  background: var(--gradient-primary);
  color: white;
}

/* Game Controls */
.game-controls {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 2rem;
  flex-wrap: wrap;
}

.control-btn {
  padding: 1rem 2rem;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 1rem;
}

.control-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
}

.btn-draw {
  background: var(--primary);
  color: white;
}

.btn-discard {
  background: var(--secondary);
  color: white;
}

.btn-xhol {
  background: var(--accent);
  color: var(--dark);
}

.btn-pass {
  background: var(--gray);
  color: white;
}

/* Leaderboard */
.leaderboard {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  overflow: hidden;
}

.leaderboard-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem 1.5rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}

.leaderboard-item:hover {
  background: rgba(255, 255, 255, 0.05);
}

.leaderboard-item:last-child {
  border-bottom: none;
}

.rank {
  font-size: 1.25rem;
  font-weight: 700;
  color: var(--accent);
  width: 40px;
  text-align: center;
}

.rank.first { color: #ffd700; }
.rank.second { color: #c0c0c0; }
.rank.third { color: #cd7f32; }

.player-info {
  flex: 1;
}

.player-stats {
  display: flex;
  gap: 2rem;
}

.stat {
  text-align: center;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .dashboard {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .sidebar {
    position: static;
  }
  
  .tables-grid {
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  }
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }
  
  .header-content {
    padding: 0 1rem;
  }
  
  .nav-links {
    gap: 1rem;
  }
  
  .auth-container {
    padding: 2rem;
    margin: 1rem;
  }
  
  .social-login {
    grid-template-columns: 1fr;
  }
  
  .game-controls {
    gap: 0.5rem;
  }
  
  .control-btn {
    padding: 0.75rem 1rem;
    font-size: 0.9rem;
  }
  
  .players-hands {
    grid-template-columns: 1fr;
  }
  
  .table-center {
    gap: 1rem;
  }
  
  .deck-card {
    width: 80px;
    height: 110px;
  }
}

/* Animations spéciales */
@keyframes cardFlip {
  0% { transform: rotateY(0); }
  50% { transform: rotateY(90deg); }
  100% { transform: rotateY(0); }
}

.card-flip {
  animation: cardFlip 0.6s ease-in-out;
}

@keyframes dealCard {
  from {
    transform: translateX(-100px) rotate(-30deg);
    opacity: 0;
  }
  to {
    transform: translateX(0) rotate(0deg);
    opacity: 1;
  }
}

.card-deal {
  animation: dealCard 0.5s ease-out;
}

/* Modal */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(10px);
  z-index: 2000;
}

.modal.active {
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background: var(--gradient-card);
  border-radius: 20px;
  padding: 2rem;
  max-width: 500px;
  width: 90%;
  border: 1px solid rgba(255, 255, 255, 0.1);
  animation: fadeInUp 0.3s ease;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.modal-title {
  font-size: 1.5rem;
  font-weight: 700;
}

.modal-close {
  background: none;
  border: none;
  color: var(--gray);
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.modal-close:hover {
  background: rgba(255, 255, 255, 0.1);
  color: white;
}

/* Notifications */
.notification {
  position: fixed;
  top: 100px;
  right: 2rem;
  background: var(--gradient-card);
  border-radius: 12px;
  padding: 1rem 1.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  z-index: 1500;
  animation: slideInRight 0.3s ease;
  max-width: 350px;
}

.notification.success { border-left: 4px solid var(--success); }
.notification.error { border-left: 4px solid var(--danger); }
.notification.warning { border-left: 4px solid var(--warning); }
.notification.info { border-left: 4px solid var(--primary); }

/* Loading States */
.loading {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 3px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: var(--primary);
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none !important;
}

.btn:disabled:hover {
  box-shadow: none !important;
}
</style>
</head>
<body>

<!-- Header -->
<header class="header">
  <div class="header-content">
    <div class="logo">
      <i class="fas fa-spade"></i> Xhol Pro
    </div>
    <nav class="nav-links" id="navLinks">
      <a href="#" class="nav-link" id="homeLink">Accueil</a>
      <a href="#" class="nav-link" id="tournamentLink">Tournois</a>
      <a href="#" class="nav-link" id="leaderboardLink">Classement</a>
      <a href="#" class="nav-link" id="profileLink">Profil</a>
      <button class="btn btn-secondary" id="logoutBtn" style="display: none;">
        <i class="fas fa-sign-out-alt"></i> Déconnexion
      </button>
    </nav>
  </div>
</header>

<!-- Auth Section -->
<section class="auth-section" id="authSection">
  <div class="auth-container">
    <h1 class="auth-title">Bienvenue sur Xhol Pro</h1>
    <p class="auth-subtitle">La plateforme de jeu de cartes ultime</p>
    
    <div class="auth-tabs">
      <div class="auth-tab active" data-tab="login">Connexion</div>
      <div class="auth-tab" data-tab="register">Inscription</div>
    </div>

    <!-- Login Form -->
    <form id="loginForm" class="auth-form">
      <div class="form-group">
        <label class="form-label">Email ou Nom d'utilisateur</label>
        <input type="text" class="form-input" placeholder="Votre email ou nom d'utilisateur" required>
      </div>
      <div class="form-group">
        <label class="form-label">Mot de passe</label>
        <input type="password" class="form-input" placeholder="Votre mot de passe" required>
      </div>
      <button type="submit" class="btn btn-primary">
        <i class="fas fa-sign-in-alt"></i> Se connecter
      </button>
    </form>

    <!-- Register Form -->
    <form id="registerForm" class="auth-form hidden">
      <div class="form-group">
        <label class="form-label">Nom d'utilisateur</label>
        <input type="text" class="form-input" placeholder="Choisissez un nom d'utilisateur" required>
      </div>
      <div class="form-group">
        <label class="form-label">Email</label>
        <input type="email" class="form-input" placeholder="votre@email.com" required>
      </div>
      <div class="form-group">
        <label class="form-label">Mot de passe</label>
        <input type="password" class="form-input" placeholder="Choisissez un mot de passe fort" required>
      </div>
      <div class="form-group">
        <label class="form-label">Confirmer le mot de passe</label>
        <input type="password" class="form-input" placeholder="Confirmez votre mot de passe" required>
      </div>
      <button type="submit" class="btn btn-primary">
        <i class="fas fa-user-plus"></i> Créer mon compte
      </button>
    </form>

    <div class="social-login">
      <a href="#" class="social-btn" id="googleAuth">
        <i class="fab fa-google"></i> Google
      </a>
      <a href="#" class="social-btn" id="appleAuth">
        <i class="fab fa-apple"></i> Apple
      </a>
    </div>
  </div>
</section>

<!-- Dashboard -->
<div class="container" id="dashboardSection" style="display: none;">
  <div class="dashboard">
    <!-- Sidebar -->
    <aside class="sidebar">
      <div class="user-profile">
        <div class="user-avatar" id="userAvatar">
          <i class="fas fa-user"></i>
        </div>
        <div class="user-name" id="userName">Joueur Pro</div>
        <div class="user-stats">
          <div class="stat-item">
            <div class="stat-value" id="userWins">0</div>
            <div class="stat-label">Victoires</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="userGames">0</div>
            <div class="stat-label">Parties</div>
          </div>
        </div>
      </div>
      
      <ul class="sidebar-nav">
        <li><a href="#" class="active" data-section="lobby">
          <i class="fas fa-home"></i> Lobby
        </a></li>
        <li><a href="#" data-section="game">
          <i class="fas fa-play"></i> Partie en cours
        </a></li>
        <li><a href="#" data-section="tournaments">
          <i class="fas fa-trophy"></i> Tournois
        </a></li>
        <li><a href="#" data-section="stats">
          <i class="fas fa-chart-bar"></i> Statistiques
        </a></li>
        <li><a href="#" data-section="settings">
          <i class="fas fa-cog"></i> Paramètres
        </a></li>
      </ul>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
      <!-- Lobby Section -->
      <section class="content-section" id="lobbyContent">
        <div class="section-title">
          <i class="fas fa-table"></i>
          Tables disponibles
          <button class="btn btn-primary" id="createTableBtn" style="margin-left: auto;">
            <i class="fas fa-plus"></i> Créer une table
          </button>
        </div>
        
        <div class="tables-grid" id="tablesGrid">
          <!-- Tables will be populated here -->
        </div>
      </section>

      <!-- Game Section -->
      <section class="content-section hidden" id="gameContent">
        <div class="game-interface">
          <div class="game-header">
            <div class="section-title">
              <i class="fas fa-spade"></i>
              Table de jeu
            </div>
            <div class="game-timer" id="gameTimer">
              <i class="fas fa-clock"></i>
              <span id="timeLeft">60</span>s
            </div>
          </div>

          <div class="game-table">
            <div class="table-center">
              <div class="deck-card deck-pile" id="deckPile">
                <i class="fas fa-layer-group"></i>
                <div>Pioche</div>
                <div class="deck-count" id="deckCount">104</div>
              </div>
              
              <div class="deck-card discard-pile" id="discardPile">
                <i class="fas fa-trash"></i>
                <div>Défausse</div>
                <div class="deck-count" id="discardCount">0</div>
              </div>
            </div>

            <div class="players-hands" id="playersHands">
              <!-- Player hands will be populated here -->
            </div>

            <div class="game-controls">
              <button class="control-btn btn-draw" id="drawBtn">
                <i class="fas fa-hand-paper"></i> Piocher
              </button>
              <button class="control-btn btn-discard" id="takeDiscardBtn">
                <i class="fas fa-recycle"></i> Prendre défausse
              </button>
              <button class="control-btn btn-xhol" id="xholBtn">
                <i class="fas fa-star"></i> Déclarer Xhol!
              </button>
              <button class="control-btn btn-pass" id="passBtn">
                <i class="fas fa-forward"></i> Passer
              </button>
            </div>
          </div>
        </div>
      </section>

      <!-- Tournaments Section -->
      <section class="content-section hidden" id="tournamentsContent">
        <div class="section-title">
          <i class="fas fa-trophy"></i>
          Tournois
        </div>
        
        <div class="tables-grid">
          <div class="table-card">
            <div class="table-header">
              <div class="table-name">Tournoi Hebdomadaire</div>
              <div class="table-status status-waiting">Inscription</div>
            </div>
            <div class="table-info">
              <div class="info-item">
                <div class="info-value">128</div>
                <div class="info-label">Joueurs max</div>
              </div>
              <div class="info-item">
                <div class="info-value">500€</div>
                <div class="info-label">Prix total</div>
              </div>
            </div>
            <div class="table-info">
              <div class="info-item">
                <div class="info-value">10€</div>
                <div class="info-label">Buy-in</div>
              </div>
              <div class="info-item">
                <div class="info-value">2h</div>
                <div class="info-label">Durée</div>
              </div>
            </div>
            <button class="btn btn-primary" style="width: 100%; margin-top: 1rem;">
              <i class="fas fa-ticket-alt"></i> S'inscrire
            </button>
          </div>
        </div>
      </section>

      <!-- Stats Section -->
      <section class="content-section hidden" id="statsContent">
        <div class="section-title">
          <i class="fas fa-chart-bar"></i>
          Vos statistiques
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
          <div class="stat-item" style="padding: 2rem; text-align: center;">
            <div class="stat-value" style="font-size: 3rem;">85%</div>
            <div class="stat-label" style="font-size: 1rem;">Taux de victoire</div>
          </div>
          <div class="stat-item" style="padding: 2rem; text-align: center;">
            <div class="stat-value" style="font-size: 3rem;">12</div>
            <div class="stat-label" style="font-size: 1rem;">Xhol réalisés</div>
          </div>
          <div class="stat-item" style="padding: 2rem; text-align: center;">
            <div class="stat-value" style="font-size: 3rem;">1250</div>
            <div class="stat-label" style="font-size: 1rem;">Points ELO</div>
          </div>
          <div class="stat-item" style="padding: 2rem; text-align: center;">
            <div class="stat-value" style="font-size: 3rem;">42s</div>
            <div class="stat-label" style="font-size: 1rem;">Temps moyen/tour</div>
          </div>
        </div>

        <div class="section-title">
          <i class="fas fa-crown"></i>
          Classement global
        </div>
        
        <div class="leaderboard" id="leaderboard">
          <!-- Leaderboard will be populated here -->
        </div>
      </section>

      <!-- Settings Section -->
      <section class="content-section hidden" id="settingsContent">
        <div class="section-title">
          <i class="fas fa-cog"></i>
          Paramètres
        </div>
        
        <div style="display: grid; gap: 2rem;">
          <div>
            <h3 style="margin-bottom: 1rem; color: var(--primary);">Profil</h3>
            <div class="form-group">
              <label class="form-label">Nom d'utilisateur</label>
              <input type="text" class="form-input" id="settingsUsername" placeholder="Votre nom d'utilisateur">
            </div>
            <div class="form-group">
              <label class="form-label">Email</label>
              <input type="email" class="form-input" id="settingsEmail" placeholder="votre@email.com">
            </div>
          </div>
          
          <div>
            <h3 style="margin-bottom: 1rem; color: var(--primary);">Préférences de jeu</h3>
            <div class="form-group">
              <label class="form-label">
                <input type="checkbox" id="autoSort" checked style="margin-right: 0.5rem;">
                Trier automatiquement les cartes
              </label>
            </div>
            <div class="form-group">
              <label class="form-label">
                <input type="checkbox" id="soundEffects" checked style="margin-right: 0.5rem;">
                Effets sonores
              </label>
            </div>
            <div class="form-group">
              <label class="form-label">
                <input type="checkbox" id="animations" checked style="margin-right: 0.5rem;">
                Animations
              </label>
            </div>
          </div>
          
          <button class="btn btn-primary" style="width: fit-content;">
            <i class="fas fa-save"></i> Sauvegarder
          </button>
        </div>
      </section>
    </main>
  </div>
</div>

<!-- Create Table Modal -->
<div class="modal" id="createTableModal">
  <div class="modal-content">
    <div class="modal-header">
      <h2 class="modal-title">Créer une nouvelle table</h2>
      <button class="modal-close" id="closeCreateModal">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <form id="createTableForm">
      <div class="form-group">
        <label class="form-label">Nom de la table</label>
        <input type="text" class="form-input" id="tableName" placeholder="Ma super table" required>
      </div>
      <div class="form-group">
        <label class="form-label">Nombre de joueurs maximum</label>
        <select class="form-input" id="maxPlayers">
          <option value="2">2 joueurs</option>
          <option value="3">3 joueurs</option>
          <option value="4" selected>4 joueurs</option>
          <option value="5">5 joueurs</option>
          <option value="6">6 joueurs</option>
        </select>
      </div>
      <div class="form-group">
        <label class="form-label">Score cible</label>
        <select class="form-input" id="targetScore">
          <option value="71">71 points</option>
          <option value="101" selected>101 points</option>
          <option value="151">151 points</option>
        </select>
      </div>
      <div class="form-group">
        <label class="form-label">Type de table</label>
        <select class="form-input" id="tableType">
          <option value="casual">Partie amicale</option>
          <option value="ranked">Partie classée</option>
          <option value="tournament">Tournoi</option>
        </select>
      </div>
      <div class="form-group">
        <label class="form-label">
          <input type="checkbox" id="privateTable" style="margin-right: 0.5rem;">
          Table privée (mot de passe requis)
        </label>
      </div>
      <div class="form-group hidden" id="passwordGroup">
        <label class="form-label">Mot de passe</label>
        <input type="password" class="form-input" id="tablePassword" placeholder="Mot de passe de la table">
      </div>
      <button type="submit" class="btn btn-primary" style="width: 100%;">
        <i class="fas fa-plus"></i> Créer la table
      </button>
    </form>
  </div>
</div>

<script>
// Variables globales sécurisées
let currentUser = null;
let currentTable = null;
let gameState = null;
let gameTimer = null;
let timeLeft = 60;
let selectedCards = new Set();
let connectionStatus = 'offline';

// Système de sécurité pour les comptes
class SecurityManager {
  constructor() {
    this.sessions = new Map();
    this.loginAttempts = new Map();
    this.maxAttempts = 5;
    this.lockoutTime = 15 * 60 * 1000; // 15 minutes
  }

  hashPassword(password, salt) {
    // Simulation d'un hash sécurisé (en production, utiliser bcrypt côté serveur)
    const combined = password + salt;
    let hash = 0;
    for (let i = 0; i < combined.length; i++) {
      const char = combined.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convertir en 32 bits
    }
    return Math.abs(hash).toString(36);
  }

  generateSalt() {
    return Math.random().toString(36).substring(2, 15);
  }

  generateSessionToken() {
    return 'sess_' + Date.now().toString(36) + Math.random().toString(36).substring(2);
  }

  validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }

  validatePassword(password) {
    // Au moins 8 caractères, 1 majuscule, 1 minuscule, 1 chiffre
    const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{8,}$/;
    return re.test(password);
  }

  isAccountLocked(identifier) {
    const attempts = this.loginAttempts.get(identifier);
    if (!attempts) return false;
    
    if (attempts.count >= this.maxAttempts) {
      const timeSinceLastAttempt = Date.now() - attempts.lastAttempt;
      return timeSinceLastAttempt < this.lockoutTime;
    }
    return false;
  }

  recordFailedAttempt(identifier) {
    const current = this.loginAttempts.get(identifier) || { count: 0, lastAttempt: 0 };
    current.count++;
    current.lastAttempt = Date.now();
    this.loginAttempts.set(identifier, current);
  }

  clearFailedAttempts(identifier) {
    this.loginAttempts.delete(identifier);
  }

  createSession(userId) {
    const token = this.generateSessionToken();
    this.sessions.set(token, {
      userId,
      createdAt: Date.now(),
      lastActivity: Date.now(),
      expires: Date.now() + (24 * 60 * 60 * 1000) // 24 heures
    });
    return token;
  }

  validateSession(token) {
    const session = this.sessions.get(token);
    if (!session) return null;
    
    if (Date.now() > session.expires) {
      this.sessions.delete(token);
      return null;
    }
    
    session.lastActivity = Date.now();
    return session;
  }
}

// Gestionnaire de base de données sécurisé
class SecureDatabase {
  constructor() {
    this.users = new Map();
    this.tables = new Map();
    this.gameHistory = new Map();
    this.encryption = new TextEncoder();
  }

  // Simulation du chiffrement (en production, utiliser des vrais algorithmes)
  encrypt(data) {
    const jsonString = JSON.stringify(data);
    return btoa(jsonString); // Base64 simple pour la démo
  }

  decrypt(encryptedData) {
    try {
      const jsonString = atob(encryptedData);
      return JSON.parse(jsonString);
    } catch (e) {
      return null;
    }
  }

  saveUser(userData) {
    const encryptedUser = this.encrypt(userData);
    this.users.set(userData.id, encryptedUser);
  }

  getUser(userId) {
    const encryptedUser = this.users.get(userId);
    return encryptedUser ? this.decrypt(encryptedUser) : null;
  }

  findUserByEmail(email) {
    for (const [userId, encryptedUser] of this.users) {
      const user = this.decrypt(encryptedUser);
      if (user && user.email === email) return user;
    }
    return null;
  }

  findUserByUsername(username) {
    for (const [userId, encryptedUser] of this.users) {
      const user = this.decrypt(encryptedUser);
      if (user && user.username === username) return user;
    }
    return null;
  }

  getAllUsers() {
    const users = [];
    for (const [userId, encryptedUser] of this.users) {
      const user = this.decrypt(encryptedUser);
      if (user) users.push(user);
    }
    return users;
  }
}

// Initialisation des systèmes de sécurité
const security = new SecurityManager();
const database = new SecureDatabase();
let nextTableId = 1;

// Système de cartes amélioré
class CardSystem {
  constructor() {
    this.suits = ['♠', '♥', '♦', '♣'];
    this.values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'];
    this.suitNames = {
      '♠': 'spades',
      '♣': 'clubs', 
      '♥': 'hearts',
      '♦': 'diamonds'
    };
  }

  createDeck() {
    const deck = [];
    
    // Deux jeux de cartes complets
    for (let gameSet = 0; gameSet < 2; gameSet++) {
      for (let suit of this.suits) {
        for (let value of this.values) {
          deck.push({
            suit: suit,
            value: value,
            suitName: this.suitNames[suit],
            id: `${value}${suit}_${gameSet}`,
            isRed: suit === '♥' || suit === '♦'
          });
        }
      }
      // 2 jokers par jeu
      deck.push({suit: 'JOKER', value: 'JOKER', id: `JOKER_${gameSet}_1`, isRed: false});
      deck.push({suit: 'JOKER', value: 'JOKER', id: `JOKER_${gameSet}_2`, isRed: false});
    }
    
    return this.shuffleDeck(deck);
  }

  shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [deck[i], deck[j]] = [deck[j], deck[i]];
    }
    return deck;
  }

  renderCard(card, isVisible = true, isClickable = false) {
    if (!isVisible) {
      return `<div class="card card-back" ${isClickable ? 'onclick="selectCard(this)"' : ''}>
                <i class="fas fa-question"></i>
              </div>`;
    }

    if (card.suit === 'JOKER') {
      return `<div class="card card-joker" ${isClickable ? 'onclick="selectCard(this)"' : ''} data-card-id="${card.id}">
                <div class="card-value">JOKER</div>
              </div>`;
    }

    const suitClass = `card-${card.suitName}`;
    return `<div class="card ${suitClass}" ${isClickable ? 'onclick="selectCard(this)"' : ''} data-card-id="${card.id}">
              <div class="card-value">${card.value}</div>
              <div class="card-suit">${card.suit}</div>
            </div>`;
  }

  getCardValue(card) {
    if (card.suit === 'JOKER') return 15;
    if (['J', 'Q', 'K', 'A'].includes(card.value)) return 10;
    return typeof card.value === 'number' ? card.value : 10;
  }
}

// Gestionnaire de connexion
class ConnectionManager {
  constructor() {
    this.status = 'offline';
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 2000;
  }

  updateStatus(status) {
    this.status = status;
    const statusElement = document.getElementById('connectionStatus');
    statusElement.className = `connection-status connection-${status}`;
    
    switch (status) {
      case 'online':
        statusElement.innerHTML = '<i class="fas fa-wifi"></i> En ligne';
        break;
      case 'connecting':
        statusElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Connexion...';
        break;
      case 'offline':
        statusElement.innerHTML = '<i class="fas fa-wifi-slash"></i> Hors ligne';
        break;
    }
  }

  simulateConnection() {
    this.updateStatus('connecting');
    setTimeout(() => {
      this.updateStatus('online');
      showNotification('Connecté au serveur', 'success');
    }, 1000);
  }
}

const cardSystem = new CardSystem();
const connectionManager = new ConnectionManager();

// Utilitaires
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.innerHTML = `
    <div style="display: flex; align-items: center; gap: 0.5rem;">
      <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'times' : type === 'warning' ? 'exclamation' : 'info'}-circle"></i>
      ${message}
    </div>
  `;
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.remove();
  }, 4000);
}

function generateUserId() {
  return 'user_' + Date.now().toString(36) + Math.random().toString(36).substring(2, 9);
}

function getInitials(name) {
  return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
}

// Système d'authentification sécurisé
function validateRegistration(formData) {
  const { username, email, password, confirmPassword } = formData;
  
  if (!username || username.length < 3) {
    throw new Error('Le nom d\'utilisateur doit contenir au moins 3 caractères');
  }
  
  if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
    throw new Error('Le nom d\'utilisateur ne peut contenir que des lettres, chiffres, tirets et underscores');
  }
  
  if (!security.validateEmail(email)) {
    throw new Error('L\'adresse email n\'est pas valide');
  }
  
  if (!security.validatePassword(password)) {
    throw new Error('Le mot de passe doit contenir au moins 8 caractères, une majuscule, une minuscule et un chiffre');
  }
  
  if (password !== confirmPassword) {
    throw new Error('Les mots de passe ne correspondent pas');
  }
  
  // Vérifier l'unicité
  if (database.findUserByEmail(email)) {
    throw new Error('Un compte avec cet email existe déjà');
  }
  
  if (database.findUserByUsername(username)) {
    throw new Error('Ce nom d\'utilisateur est déjà pris');
  }
  
  return true;
}

function registerUser(formData) {
  try {
    validateRegistration(formData);
    
    const userId = generateUserId();
    const salt = security.generateSalt();
    const hashedPassword = security.hashPassword(formData.password, salt);
    
    const newUser = {
      id: userId,
      username: formData.username,
      email: formData.email,
      passwordHash: hashedPassword,
      salt: salt,
      stats: {
        gamesPlayed: 0,
        gamesWon: 0,
        totalScore: 0,
        xholCount: 0,
        elo: 1000
      },
      createdAt: Date.now(),
      lastLogin: null,
      isVerified: false // En production, implémenter la vérification email
    };
    
    database.saveUser(newUser);
    
    // Créer une session
    const sessionToken = security.createSession(userId);
    currentUser = newUser;
    currentUser.sessionToken = sessionToken;
    
    return newUser;
  } catch (error) {
    throw error;
  }
}

function loginUser(identifier, password) {
  // Vérifier si le compte est verrouillé
  if (security.isAccountLocked(identifier)) {
    throw new Error('Compte temporairement verrouillé. Réessayez dans 15 minutes.');
  }
  
  // Rechercher l'utilisateur
  let user = database.findUserByEmail(identifier) || database.findUserByUsername(identifier);
  
  if (!user) {
    security.recordFailedAttempt(identifier);
    throw new Error('Identifiants incorrects');
  }
  
  // Vérifier le mot de passe
  const hashedInput = security.hashPassword(password, user.salt);
  if (hashedInput !== user.passwordHash) {
    security.recordFailedAttempt(identifier);
    throw new Error('Identifiants incorrects');
  }
  
  // Connexion réussie
  security.clearFailedAttempts(identifier);
  user.lastLogin = Date.now();
  database.saveUser(user);
  
  // Créer une session
  const sessionToken = security.createSession(user.id);
  currentUser = user;
  currentUser.sessionToken = sessionToken;
  
  return user;
}

// Gestion des onglets d'authentification
document.querySelectorAll('.auth-tab').forEach(tab => {
  tab.addEventListener('click', () => {
    document.querySelectorAll('.auth-tab').forEach(t => t.classList.remove('active'));
    tab.classList.add('active');
    
    const targetTab = tab.dataset.tab;
    document.querySelectorAll('.auth-form').forEach(form => {
      form.classList.add('hidden');
    });
    document.getElementById(targetTab + 'Form').classList.remove('hidden');
  });
});

// Gestion de l'inscription
document.getElementById('registerForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const inputs = e.target.querySelectorAll('input');
  
  const formData = {
    username: inputs[0].value.trim(),
    email: inputs[1].value.trim(),
    password: inputs[2].value,
    confirmPassword: inputs[3].value
  };
  
  try {
    const user = registerUser(formData);
    showNotification('Compte créé avec succès!', 'success');
    setTimeout(() => showDashboard(), 1000);
  } catch (error) {
    showNotification(error.message, 'error');
  }
});

// Gestion de la connexion
document.getElementById('loginForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const inputs = e.target.querySelectorAll('input');
  
  const identifier = inputs[0].value.trim();
  const password = inputs[1].value;
  
  try {
    const user = loginUser(identifier, password);
    showNotification('Connexion réussie!', 'success');
    setTimeout(() => showDashboard(), 1000);
  } catch (error) {
    showNotification(error.message, 'error');
  }
});

// Connexion sociale (simulée mais sécurisée)
document.getElementById('googleAuth').addEventListener('click', (e) => {
  e.preventDefault();
  simulateSocialLogin('Google');
});

document.getElementById('appleAuth').addEventListener('click', (e) => {
  e.preventDefault();
  simulateSocialLogin('Apple');
});

function simulateSocialLogin(provider) {
  // Simuler une authentification OAuth
  const randomId = Math.floor(Math.random() * 10000);
  const tempEmail = `user${randomId}@${provider.toLowerCase()}.com`;
  const tempUsername = `${provider}User${randomId}`;
  
  // Vérifier si l'utilisateur existe déjà
  let existingUser = database.findUserByEmail(tempEmail);
  if (!existingUser) {
    // Créer un nouveau compte
    const userId = generateUserId();
    const salt = security.generateSalt();
    
    const newUser = {
      id: userId,
      username: tempUsername,
      email: tempEmail,
      passwordHash: security.hashPassword('oauth_' + Date.now(), salt),
      salt: salt,
      authProvider: provider,
      stats: {
        gamesPlayed: Math.floor(Math.random() * 50),
        gamesWon: Math.floor(Math.random() * 25),
        totalScore: Math.floor(Math.random() * 1000),
        xholCount: Math.floor(Math.random() * 10),
        elo: 1000 + Math.floor(Math.random() * 500)
      },
      createdAt: Date.now(),
      lastLogin: Date.now(),
      isVerified: true
    };
    
    database.saveUser(newUser);
    existingUser = newUser;
  }
  
  // Créer une session
  const sessionToken = security.createSession(existingUser.id);
  currentUser = existingUser;
  currentUser.sessionToken = sessionToken;
  
  showNotification(`Connecté via ${provider}!`, 'success');
  setTimeout(() => showDashboard(), 1000);
}

// Affichage du dashboard
function showDashboard() {
  document.getElementById('authSection').style.display = 'none';
  document.getElementById('dashboardSection').style.display = 'block';
  document.getElementById('logoutBtn').style.display = 'block';
  
  updateUserProfile();
  loadTables();
  loadLeaderboard();
  initializeDemoData();
  
  // Simuler la connexion
  connectionManager.simulateConnection();
}

function updateUserProfile() {
  document.getElementById('userName').textContent = currentUser.username;
  document.getElementById('userAvatar').innerHTML = getInitials(currentUser.username);
  document.getElementById('userWins').textContent = currentUser.stats.gamesWon;
  document.getElementById('userGames').textContent = currentUser.stats.gamesPlayed;
  document.getElementById('settingsUsername').value = currentUser.username;
  document.getElementById('settingsEmail').value = currentUser.email || '';
}

// Navigation dans la sidebar
document.querySelectorAll('.sidebar-nav a').forEach(link => {
  link.addEventListener('click', (e) => {
    e.preventDefault();
    
    document.querySelectorAll('.sidebar-nav a').forEach(l => l.classList.remove('active'));
    link.classList.add('active');
    
    const section = link.dataset.section;
    showSection(section);
  });
});

function showSection(sectionName) {
  document.querySelectorAll('.content-section').forEach(section => {
    section.classList.add('hidden');
  });
  
  const targetSection = document.getElementById(sectionName + 'Content');
  if (targetSection) {
    targetSection.classList.remove('hidden');
  }
  
  // Actions spécifiques par section
  switch(sectionName) {
    case 'stats':
      updateStatsSection();
      break;
    case 'game':
      if (currentTable) {
        updateGameInterface();
      }
      break;
  }
}

// Système de jeu amélioré avec vraie table de poker
function createPokerTablePositions(numPlayers) {
  const playersPositions = document.getElementById('playersPositions');
  playersPositions.innerHTML = '';
  
  for (let i = 0; i < numPlayers; i++) {
    const playerDiv = document.createElement('div');
    playerDiv.className = `player-position position-${i}`;
    playerDiv.id = `player-${i}`;
    
    playerDiv.innerHTML = `
      <div class="player-card">
        <div class="player-avatar-game"></div>
        <div class="player-name-game"></div>
        <div class="player-score">0 pts</div>
        <div class="player-cards"></div>
      </div>
    `;
    
    playersPositions.appendChild(playerDiv);
  }
}

function updatePlayerPosition(playerIndex, player, gameData, isCurrentUser = false) {
  const playerElement = document.getElementById(`player-${playerIndex}`);
  if (!playerElement) return;
  
  const playerCard = playerElement.querySelector('.player-card');
  const avatar = playerElement.querySelector('.player-avatar-game');
  const nameElement = playerElement.querySelector('.player-name-game');
  const scoreElement = playerElement.querySelector('.player-score');
  const<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Xhol Pro - Plateforme de Jeu</title>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --primary: #0ea5e9;
  --primary-dark: #0369a1;
  --secondary: #8b5cf6;
  --accent: #f59e0b;
  --success: #10b981;
  --danger: #ef4444;
  --warning: #f59e0b;
  --dark: #0f172a;
  --dark-light: #1e293b;
  --gray: #64748b;
  --light: #f1f5f9;
  --white: #ffffff;
  --table-green: #0d7c47;
  --table-felt: #1a5e3a;
  --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  --gradient-dark: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 100%);
  --gradient-card: linear-gradient(145deg, #1e293b, #0f172a);
  --shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  --shadow-lg: 0 35px 60px -12px rgba(0, 0, 0, 0.35);
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: var(--gradient-dark);
  color: var(--white);
  min-height: 100vh;
  overflow-x: hidden;
}

/* Animations globales */
@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideInRight {
  from { opacity: 0; transform: translateX(50px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.05); }
}

@keyframes glow {
  0%, 100% { box-shadow: 0 0 20px rgba(14, 165, 233, 0.3); }
  50% { box-shadow: 0 0 40px rgba(14, 165, 233, 0.6); }
}

@keyframes cardFlip {
  0% { transform: rotateY(0deg); }
  50% { transform: rotateY(90deg); }
  100% { transform: rotateY(0deg); }
}

@keyframes dealCard {
  from {
    transform: scale(0) rotate(180deg);
    opacity: 0;
  }
  to {
    transform: scale(1) rotate(0deg);
    opacity: 1;
  }
}

/* Header */
.header {
  background: rgba(15, 23, 42, 0.95);
  backdrop-filter: blur(20px);
  padding: 1rem 2rem;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1400px;
  margin: 0 auto;
}

.logo {
  font-size: 2rem;
  font-weight: 900;
  background: var(--gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.nav-links {
  display: flex;
  gap: 2rem;
  align-items: center;
}

.nav-link {
  color: var(--light);
  text-decoration: none;
  font-weight: 500;
  transition: all 0.3s ease;
  position: relative;
}

.nav-link:hover {
  color: var(--primary);
}

.nav-link::after {
  content: '';
  position: absolute;
  width: 0;
  height: 2px;
  bottom: -5px;
  left: 0;
  background: var(--primary);
  transition: width 0.3s ease;
}

.nav-link:hover::after {
  width: 100%;
}

/* Containers */
.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 2rem;
  margin-top: 80px;
}

.hidden {
  display: none !important;
}

/* Auth Section */
.auth-section {
  min-height: calc(100vh - 80px);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
}

.auth-container {
  background: var(--gradient-card);
  border-radius: 24px;
  padding: 3rem;
  box-shadow: var(--shadow-lg);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  max-width: 480px;
  width: 100%;
  animation: fadeInUp 0.6s ease;
}

.auth-title {
  font-size: 2.5rem;
  font-weight: 800;
  text-align: center;
  margin-bottom: 0.5rem;
  background: var(--gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.auth-subtitle {
  text-align: center;
  color: var(--gray);
  margin-bottom: 2rem;
}

.auth-tabs {
  display: flex;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 12px;
  padding: 4px;
  margin-bottom: 2rem;
}

.auth-tab {
  flex: 1;
  padding: 12px;
  text-align: center;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 600;
}

.auth-tab.active {
  background: var(--primary);
  color: white;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: var(--light);
}

.form-input {
  width: 100%;
  padding: 1rem 1.5rem;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: white;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.form-input:focus {
  outline: none;
  border-color: var(--primary);
  background: rgba(255, 255, 255, 0.08);
}

.form-input::placeholder {
  color: var(--gray);
}

.btn {
  padding: 1rem 2rem;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1rem;
  position: relative;
  overflow: hidden;
}

.btn:before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.btn:hover:before {
  left: 100%;
}

.btn-primary {
  background: var(--gradient-primary);
  color: white;
  width: 100%;
  margin-bottom: 1rem;
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 20px 40px rgba(14, 165, 233, 0.4);
}

.btn-secondary {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: 2px solid rgba(255, 255, 255, 0.2);
}

.btn-secondary:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: var(--primary);
}

.social-login {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-top: 1.5rem;
}

.social-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: white;
  text-decoration: none;
  transition: all 0.3s ease;
  font-weight: 600;
}

.social-btn:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: translateY(-2px);
}

/* Dashboard */
.dashboard {
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 2rem;
  min-height: calc(100vh - 80px);
}

.sidebar {
  background: var(--gradient-card);
  border-radius: 20px;
  padding: 2rem;
  height: fit-content;
  position: sticky;
  top: 100px;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.user-profile {
  text-align: center;
  margin-bottom: 2rem;
  padding-bottom: 2rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.user-avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: var(--gradient-primary);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 1rem;
  font-size: 2rem;
  color: white;
  animation: glow 3s ease-in-out infinite;
}

.user-name {
  font-size: 1.25rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.user-stats {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  text-align: center;
}

.stat-item {
  background: rgba(255, 255, 255, 0.05);
  padding: 1rem;
  border-radius: 12px;
}

.stat-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--primary);
}

.stat-label {
  font-size: 0.75rem;
  color: var(--gray);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.sidebar-nav {
  list-style: none;
}

.sidebar-nav li {
  margin-bottom: 0.5rem;
}

.sidebar-nav a {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  color: var(--light);
  text-decoration: none;
  border-radius: 12px;
  transition: all 0.3s ease;
  font-weight: 500;
}

.sidebar-nav a:hover, .sidebar-nav a.active {
  background: var(--primary);
  transform: translateX(5px);
}

/* Main Content */
.main-content {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.content-section {
  background: var(--gradient-card);
  border-radius: 20px;
  padding: 2rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  animation: fadeInUp 0.6s ease;
}

.section-title {
  font-size: 1.75rem;
  font-weight: 700;
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
  gap: 1rem;
}

.section-title i {
  color: var(--primary);
}

/* Table de poker */
.poker-table {
  width: 100%;
  height: 600px;
  position: relative;
  background: radial-gradient(ellipse at center, var(--table-green) 0%, var(--table-felt) 100%);
  border-radius: 50%;
  border: 12px solid #8B4513;
  box-shadow: inset 0 0 50px rgba(0, 0, 0, 0.5), 0 0 30px rgba(0, 0, 0, 0.8);
  margin: 2rem auto;
  overflow: hidden;
}

.table-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  z-index: 10;
}

.deck-area {
  display: flex;
  gap: 2rem;
  align-items: center;
}

.deck-pile, .discard-pile {
  width: 80px;
  height: 112px;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  box-shadow: var(--card-shadow);
  border: 2px solid rgba(255, 255, 255, 0.2);
}

.deck-pile {
  background: linear-gradient(45deg, #1a1a2e, #16213e);
  color: #fff;
}

.deck-pile:hover {
  transform: scale(1.05);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
}

.discard-pile {
  background: linear-gradient(45deg, #8B0000, #DC143C);
  color: white;
  min-height: 112px;
}

.discard-pile:hover {
  transform: scale(1.05);
}

.deck-count {
  position: absolute;
  bottom: 5px;
  font-size: 0.7rem;
  background: rgba(0, 0, 0, 0.7);
  padding: 2px 6px;
  border-radius: 4px;
}

.game-info {
  text-align: center;
  color: white;
  background: rgba(0, 0, 0, 0.7);
  padding: 1rem;
  border-radius: 12px;
  backdrop-filter: blur(10px);
}

.turn-indicator {
  font-size: 1.2rem;
  font-weight: 700;
  color: var(--accent);
}

.round-info {
  margin-top: 0.5rem;
  font-size: 0.9rem;
  color: var(--gray);
}

/* Positions des joueurs autour de la table */
.player-position {
  position: absolute;
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: all 0.3s ease;
}

.player-position.active {
  z-index: 20;
}

.player-position.current-turn::before {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 3px solid var(--accent);
  border-radius: 50%;
  animation: pulse 2s infinite;
  z-index: -1;
}

/* Positions spécifiques */
.position-0 { bottom: 20px; left: 50%; transform: translateX(-50%); }
.position-1 { right: 80px; top: 50%; transform: translateY(-50%); }
.position-2 { top: 20px; left: 50%; transform: translateX(-50%); }
.position-3 { left: 80px; top: 50%; transform: translateY(-50%); }
.position-4 { right: 200px; top: 80px; }
.position-5 { left: 200px; top: 80px; }

.player-card {
  background: rgba(0, 0, 0, 0.8);
  border-radius: 12px;
  padding: 1rem;
  text-align: center;
  min-width: 120px;
  backdrop-filter: blur(10px);
  border: 2px solid rgba(255, 255, 255, 0.1);
}

.player-card.current-user {
  border-color: var(--primary);
  box-shadow: 0 0 20px rgba(14, 165, 233, 0.3);
}

.player-avatar-game {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: var(--gradient-secondary);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 0.5rem;
  font-weight: 600;
  color: white;
}

.player-name-game {
  font-size: 0.9rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.player-score {
  background: rgba(255, 255, 255, 0.1);
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.8rem;
  margin-bottom: 0.5rem;
}

.player-cards {
  display: flex;
  gap: 2px;
  justify-content: center;
  margin-top: 0.5rem;
  flex-wrap: wrap;
}

/* Cartes de jeu */
.card {
  width: 45px;
  height: 63px;
  border-radius: 6px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  font-size: 0.7rem;
  border: 1px solid rgba(0, 0, 0, 0.3);
  box-shadow: var(--card-shadow);
  user-select: none;
}

.card:hover {
  transform: translateY(-10px) scale(1.1);
  z-index: 15;
}

.card.selected {
  transform: translateY(-15px) scale(1.1);
  border: 2px solid var(--accent);
  box-shadow: 0 0 15px rgba(245, 158, 11, 0.5);
}

.card-spades, .card-clubs {
  background: linear-gradient(145deg, #ffffff, #f0f0f0);
  color: #000;
}

.card-hearts, .card-diamonds {
  background: linear-gradient(145deg, #ffffff, #f0f0f0);
  color: #e53e3e;
}

.card-joker {
  background: linear-gradient(145deg, #ffd700, #ffed4e);
  color: #1a202c;
  animation: pulse 2s infinite;
}

.card-back {
  background: linear-gradient(45deg, #1a1a2e, #16213e);
  color: var(--primary);
}

.card-value {
  font-size: 0.8rem;
  font-weight: 700;
}

.card-suit {
  font-size: 1rem;
  margin-top: -2px;
}

/* Contrôles de jeu */
.game-controls {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 1rem;
  z-index: 100;
  background: rgba(0, 0, 0, 0.8);
  padding: 1rem;
  border-radius: 20px;
  backdrop-filter: blur(10px);
}

.control-btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.9rem;
  white-space: nowrap;
}

.control-btn:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
}

.control-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-draw {
  background: var(--primary);
  color: white;
}

.btn-discard {
  background: var(--secondary);
  color: white;
}

.btn-xhol {
  background: var(--accent);
  color: var(--dark);
  animation: glow 3s ease-in-out infinite;
}

.btn-pass {
  background: var(--gray);
  color: white;
}

/* Timer */
.game-timer {
  position: absolute;
  top: 20px;
  right: 20px;
  background: rgba(0, 0, 0, 0.8);
  padding: 1rem;
  border-radius: 12px;
  backdrop-filter: blur(10px);
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--accent);
  min-width: 100px;
}

.timer-warning {
  color: var(--danger);
  animation: pulse 1s infinite;
}

/* Tables Grid */
.tables-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 1.5rem;
}

.table-card {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  padding: 1.5rem;
  border: 2px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.table-card:hover {
  transform: translateY(-5px);
  border-color: var(--primary);
  box-shadow: 0 20px 40px rgba(14, 165, 233, 0.2);
}

.table-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.table-name {
  font-size: 1.25rem;
  font-weight: 700;
}

.table-status {
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
}

.status-waiting {
  background: var(--warning);
  color: var(--dark);
}

.status-playing {
  background: var(--success);
  color: white;
}

.status-full {
  background: var(--danger);
  color: white;
}

.table-info {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

.info-item {
  text-align: center;
}

.info-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--primary);
}

.info-label {
  font-size: 0.75rem;
  color: var(--gray);
  text-transform: uppercase;
}

.players-list {
  margin-bottom: 1rem;
}

.player-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.5rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
  margin-bottom: 0.5rem;
}

.player-avatar-small {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: var(--gradient-secondary);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 0.75rem;
}

/* Leaderboard */
.leaderboard {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  overflow: hidden;
}

.leaderboard-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem 1.5rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}

.leaderboard-item:hover {
  background: rgba(255, 255, 255, 0.05);
}

.leaderboard-item:last-child {
  border-bottom: none;
}

.rank {
  font-size: 1.25rem;
  font-weight: 700;
  color: var(--accent);
  width: 40px;
  text-align: center;
}

.rank.first { color: #ffd700; }
.rank.second { color: #c0c0c0; }
.rank.third { color: #cd7f32; }

.player-info {
  flex: 1;
}

.player-stats {
  display: flex;
  gap: 2rem;
}

.stat {
  text-align: center;
}

/* Modal */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(10px);
  z-index: 2000;
}

.modal.active {
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background: var(--gradient-card);
  border-radius: 20px;
  padding: 2rem;
  max-width: 500px;
  width: 90%;
  border: 1px solid rgba(255, 255, 255, 0.1);
  animation: fadeInUp 0.3s ease;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.modal-title {
  font-size: 1.5rem;
  font-weight: 700;
}

.modal-close {
  background: none;
  border: none;
  color: var(--gray);
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.modal-close:hover {
  background: rgba(255, 255, 255, 0.1);
  color: white;
}

/* Notifications */
.notification {
  position: fixed;
  top: 100px;
  right: 2rem;
  background: var(--gradient-card);
  border-radius: 12px;
  padding: 1rem 1.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  z-index: 1500;
  animation: slideInRight 0.3s ease;
  max-width: 350px;
}

.notification.success { border-left: 4px solid var(--success); }
.notification.error { border-left: 4px solid var(--danger); }
.notification.warning { border-left: 4px solid var(--warning); }
.notification.info { border-left: 4px solid var(--primary); }

/* Loading States */
.loading {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 3px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: var(--primary);
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none !important;
}

.btn:disabled:hover {
  box-shadow: none !important;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .dashboard {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .sidebar {
    position: static;
  }
  
  .tables-grid {
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  }
  
  .poker-table {
    height: 500px;
  }
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }
  
  .header-content {
    padding: 0 1rem;
  }
  
  .nav-links {
    gap: 1rem;
  }
  
  .auth-container {
    padding: 2rem;
    margin: 1rem;
  }
  
  .social-login {
    grid-template-columns: 1fr;
  }
  
  .game-controls {
    gap: 0.5rem;
    padding: 0.75rem;
  }
  
  .control-btn {
    padding: 0.6rem 1rem;
    font-size: 0.8rem;
  }
  
  .poker-table {
    height: 400px;
  }
  
  .player-cards .card {
    width: 35px;
    height: 49px;
    font-size: 0.6rem;
  }
}

/* Sécurité - Masquer certains éléments en développement */
.dev-info {
  position: fixed;
  bottom: 10px;
  left: 10px;
  background: rgba(0, 0, 0, 0.8);
  color: var(--primary);
  padding: 0.5rem;
  border-radius: 8px;
  font-size: 0.7rem;
  font-family: monospace;
  z-index: 9999;
}

/* Animations pour les cartes */
.card-dealing {
  animation: dealCard 0.5s ease-out forwards;
}

.card-flipping {
  animation: cardFlip 0.6s ease-in-out forwards;
}

/* Indicateur de connexion */
.connection-status {
  position: fixed;
  top: 20px;
  left: 20px;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 600;
  z-index: 1100;
}

.connection-online {
  background: var(--success);
  color: white;
}

.connection-offline {
  background: var(--danger);
  color: white;
}

.connection-connecting {
  background: var(--warning);
  color: var(--dark);
}